
# My config


# c.colors.webpage.darkmode.enabled = True

# Dark mode
config.set("colors.webpage.darkmode.enabled", True)



# aliases
config.bind('W', 'hint links spawn vlc {hint-url}')
config.bind('Z', 'hint links spawn alacritty -e youtube-dl {hint-url}')
config.bind('t', 'set-cmd-text -s :open -t')
config.bind('xb', 'config-cycle statusbar.show always never')
config.bind('xt', 'config-cycle tabs.show always never')
config.bind('xx', 'config-cycle statusbar.show always never;; config-cycle tabs.show always never')

# make sure rofi is installed
config.bind('phu', 'spawn --userscript qute-pass --username-only')
config.bind('php', 'spawn --userscript qute-pass --password-only')



# Theme
config.source('themes/base16-onedark.config.py')

# Search engines
c.url.searchengines = {'DEFAULT': 'https://searx.be/?preferences=eJxtVsty6zYM_Zpqo4mn7V105VVnum1n7t1rIBKWEJEEw4dl5esLWrJFxVnEEQ9JEAQODqgg4cCBMJ4HdBjANAbckGHAMxgZsAKDZ3QN5MSKrTeY8DwwDwYbsrKu84Fvy_lXyNhYTCPr83___vzVRLhgRAhqPP_epBEtniOV_U3AmE2KHbvO4dwl6M__gInYaKZOJtlcMZwZZHjiMDQcFYS3mBbxxPBAijVem9VYt8LFu0ahSxg6MDRY-dyMgr6CU6i7zZkV_cgYlo5clyjJ_rv35C7kKIlNFdiYFdQUoTeyHd1ATuIEfmothcCh6y5kMP7259_FMF2xpdh1WxzvaCLVdfcolVU9OK3A-q6zOZIqCLmh3lHG7bq-3ldQiZRg5feBXEkjC7b-v6Opz2rCJHtTGSdNw7B7qZR6S9dqA3t0EuqI1WEL-tojlYMh_IIEdGqpMY34KZF_3kvyQ-CSBKCyrPXQaryHmNgdIqVZ3A7tmPvNdQw8k-46FuIEGc80kYYEh01y1_I38PfoayDR8jt51AS75SRJXQ4X_ONWbbnowMWRRwwvhtQU6gUBsY18STMEbDUFVImFWus9LoHcRFCzYKBBCAUx1WcOwkJ4XL7wu8cwbMO12F7TveHewNKC93F3sp6xfCU8bPOsdZ2sEfoA5Wc7b7zv3gZkdb8HixxUlsjJJ3GO32MP--8UR95tTBJAiJW3huT8sLR8aRW7QQSgzpkRql8PeTfcx4SnEDcX4dMsgVR1oqWbMpz1jjhvt9VuAdjPtiDpwcfNSz0E9Fw550G8HSg-asrn_iTsfowWT9vnxyyEr928A8eyXaEXWq7wS34jeoJVtGqUs6jI8XYxiZcslXwxPD-iEqfcZ5fyNo7ZY8jxedfVcKFaW36efAULJSH4XCYhEhlroxrZgOyOiqT8cT02JF9aQHXtxNPCiSXlE7g9jiLqpKUwRDpSFd7sorA0jrUAgRCwtngHjoFcOKfcYyU4QGaxXISlitWVLHI1nqk_yJa0tptocqADv4rW9MxT_AoeXCjAR-aEX1dJgoJ6QYvMUlpeYF6-xE-TSp_sjor048dftz1oOmt0e0FF_HRg6_Uic4hTjTi4lszvQMj9MqB91JBHDGtEn8GyRSfliEn0Y56xr6ZCtr2p1858o4mdVEYbF8dusVj59-5PfnZHMbfSBg6dL4iHNeAxlUa9sv9b-LWQ6sk9WQ26Lx28zIuu5FtbXHkUTLjRtaZ3mduaRdX9AscY8FIvxCTUc2KwurTsoFoEZZwKrVdFp7S3umGT26oZrPL9cr0NP9Bww76pzoesFruRqpr7fNumdqgIH0jrKi02YinQ3c5jTpRPeh9svfs4H5N0wWShPG3Al0zowqV9kR9FE9xzloK8O3uoPBDrQrh6i3ijSRQ1siIw7Z2OdelXVT0Vp-4XelKMzSplfqx6vRVeWmnObQrgohEf6icGB-1o2oD93edNFtrEc-HV7bSNTgzd-lqdg7wYNz3dp0XpOjWiml5mRJM6CcaEy07M748Yiy6ugxcrI8ckRY_igOinenVgqxyJuVqf-Iu8f428Tb5ZaS7yEL7w6yUClGdZJ09AOceWBtOIvEu6z_8DjbSgWg==&q={}',

                       'aw': 'https://wiki.archlinux.org/?search={}',
                       'go': 'https://www.google.com/search?q={}',
                       're': 'https://www.reddit.com/r/{}',
                       'ub': 'https://www.urbandictionary.com/define.php?term={}',
                       'yt': 'https://www.youtube.com/results?search_query={}',
                       'wiki': 'https://en.wikipedia.org/w/index.php?search={}',
                       'pdf': 'https://www.pdfdrive.com/{}-books.html'

                       }





#   Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'devtools://*')

# Value to send in the `Accept-Language` header. Note that the value
# read from JavaScript is always the global value.
# Type: String
config.set('content.headers.accept_language', '', 'https://matchmaker.krunker.io/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:90.0) Gecko/20100101 Firefox/90.0', 'https://accounts.google.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Render all web contents using a dark theme. Example configurations
# from Chromium's `chrome://flags`:  - "With simple HSL/CIELAB/RGB-based
# inversion": Set   `colors.webpage.darkmode.algorithm` accordingly.  -
# "With selective image inversion": Set
# `colors.webpage.darkmode.policy.images` to `smart`.  - "With selective
# inversion of non-image elements": Set
# `colors.webpage.darkmode.threshold.text` to 150 and
# `colors.webpage.darkmode.threshold.background` to 205.  - "With
# selective inversion of everything": Combines the two variants   above.
# Type: Bool
